const {
  register,
  login,
  verifyEmail,
  forgotPassword,
  sendValidTokenResponse,
  resetPassword,
  onSocialLoginSuccess,
  onSocialLoginFailed,
} = require("./auth");
const {
  getAllUsers,
  getUserById,
  getCurrentUserDetails,
  getPrepAiStatus,
  getCollegesStatus,
  getEssaysStatus,
  deleteUserById,
  submitOrientation,
  updateUserDetails,
  updateProfilePicture,
  deleteProfilePicture,
  updateName,
  updatePassword,
} = require("./user");
const {
  getAllUniversities,
  getAllUniversitiesForDropdown,
  getUniversityById,
  createNewUniversity,
  deleteUniversityById,
  updateUniversityById,
} = require("./university");
const { getAllQuestions, getAllQuestionsBySectionId } = require("./question");
const {
  createAnswerForSelectedAdjectives,
  getAnswerById,
  getAnswerByQuestionId,
  getAllAnswers,
  getSelectedAdjectivesAnswers,
  createOrUpdateAnswer,
} = require("./answer");
const {
  createNewDeadline,
  deleteDeadlineById,
  getAllDeadlines,
  getDeadlineById,
  updateDeadlineById,
} = require("./deadline");
const {
  createNewEssay,
  getAllSelectedUniversitiesEssays,
  getAllSelectedUniversitiesWithEssaysForDashboard,
  getAllSelectedEssays,
  getEssaySubmissionById,
  submitEssay,
  generateRealEssay,
  // generateFinalEssay,
  updateEssay,
  consolePrompt,
  saveEssay,
  markFavoriteEssay,
  updatePersonalizeEssay,
  scanEssayWithAi,
  getEssaySubmissionsStats,
  getEssaySubmissionStatsForCalender,
  getAllSystemGuidanceByIds,
  getThingsBeforeGeneratingFinalEssay,
  markEssayCompletedOrInCompleted,
} = require("./essay");
const {
  transformInspire,
  clarityAndCoherence,
  compellingStorytelling,
  conciseness,
  essayCoaching,
  expandInspire,
  grammarSpelling,
  promptRelevance,
  structuralStrength,
  summarizeInspire,
} = require("./essentials");
const {
  createNewStudentUniversity,
  getAllStudentUniversities,
  updateStudentUniversityField,
  deleteStudentUniversityById,
  getStudentUniversitiesTypeStats,
  getSelectedCollegesCount,
} = require("./studentUniversity");
const { createNewSection, getAllSections } = require("./section");
const { sendConfirmationEmailToUserAndCompany } = require("./email");
const {
  createCheckoutSession,
  getUserSubscriptionDetail,
  cancelUserSubscription,
} = require("./payment");
const { checkoutSessionWebhook, testWebhook } = require("./webhook");
const { getPlans, getPlanIds } = require("./plans");
const { getTransactionsByUserId } = require("./transaction");
const {
  uploadAllUniversities,
  uploadAllEssayCategories,
  uploadAllPromptQuestions,
  uploadAllSystemGuidance,
  uploadAllStripePlans,
} = require("./scripts");
const { reportIssue } = require("./reportedIssue");

module.exports = {
  consolePrompt,
  register,
  login,
  verifyEmail,
  forgotPassword,
  sendValidTokenResponse,
  resetPassword,
  onSocialLoginSuccess,
  onSocialLoginFailed,
  getAllUsers,
  getUserById,
  getCurrentUserDetails,
  submitOrientation,
  updateUserDetails,
  getPrepAiStatus,
  getCollegesStatus,
  getEssaysStatus,
  updateProfilePicture,
  deleteProfilePicture,
  updateName,
  updatePassword,
  deleteUserById,
  getAllUniversities,
  getAllUniversitiesForDropdown,
  getStudentUniversitiesTypeStats,
  getSelectedCollegesCount,
  getEssaySubmissionsStats,
  getEssaySubmissionStatsForCalender,
  getUniversityById,
  createNewUniversity,
  deleteUniversityById,
  updateUniversityById,
  uploadAllUniversities,
  uploadAllEssayCategories,
  uploadAllPromptQuestions,
  uploadAllSystemGuidance,
  uploadAllStripePlans,
  getAllQuestions,
  getAllQuestionsBySectionId,
  createAnswerForSelectedAdjectives,
  getAnswerById,
  getAnswerByQuestionId,
  getAllAnswers,
  getSelectedAdjectivesAnswers,
  createOrUpdateAnswer,
  createNewDeadline,
  deleteDeadlineById,
  getAllDeadlines,
  getDeadlineById,
  updateDeadlineById,
  createNewEssay,
  saveEssay,
  scanEssayWithAi,
  updatePersonalizeEssay,
  markFavoriteEssay,
  getAllSelectedUniversitiesEssays,
  getAllSelectedUniversitiesWithEssaysForDashboard,
  createNewStudentUniversity,
  getAllStudentUniversities,
  submitEssay,
  generateRealEssay,
  // generateFinalEssay,
  updateEssay,
  getEssaySubmissionById,
  getAllSelectedEssays,
  updateStudentUniversityField,
  deleteStudentUniversityById,
  createNewSection,
  getAllSections,
  sendConfirmationEmailToUserAndCompany,
  getAllSystemGuidanceByIds,
  getThingsBeforeGeneratingFinalEssay,
  markEssayCompletedOrInCompleted,
  transformInspire,
  clarityAndCoherence,
  compellingStorytelling,
  conciseness,
  essayCoaching,
  expandInspire,
  grammarSpelling,
  promptRelevance,
  structuralStrength,
  summarizeInspire,
  createCheckoutSession,
  getUserSubscriptionDetail,
  cancelUserSubscription,
  checkoutSessionWebhook,
  getPlans,
  getPlanIds,
  testWebhook,
  getTransactionsByUserId,
  reportIssue,
};
